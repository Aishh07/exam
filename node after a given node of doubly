// C Program to insert a node after a given node of doubly linked list

#include <stdio.h>

struct Node {
    int data;
    struct Node *next;
    struct Node *prev;
};

// Function to create a new node with the given data
struct Node *createNode(int new_data) {
    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));
    new_node->data = new_data;
    new_node->next = NULL;
    return new_node;
}

// Function to insert a new node after a given node in doubly linked list
struct Node *insertAfter(struct Node *head, int key, int new_data) {
    struct Node *curr = head;

    // Iterate over Linked List to find the key
    while (curr != NULL) {
        if (curr->data == key)
            break;
        curr = curr->next;
    }

    // If curr becomes NULL, the given key
    // is not found in linked list
    if (curr == NULL)
        return head;

    // Create a new node
    struct Node *new_node = createNode(new_data);

    // Set prev of new node to the given node
    new_node->prev = curr;

    // Set next of new node to the next of given node
    new_node->next = curr->next;

    // Update next of given node to new node
    curr->next = new_node;

    // Update the prev of new node's next with new node
    if (new_node->next != NULL)
        new_node->next->prev = new_node;

    return head;
}

// Function to print the doubly linked list
void printList(struct Node *head) {
    struct Node *curr = head;
    while (curr != NULL) {
        printf(" %d", curr->data);
        curr = curr->next;
    }
    printf("\n");
}

int main() {

    // Create a hardcoded doubly linked list:
    // 1 <-> 3 <-> 4
    struct Node *head = createNode(1);
    head->next = createNode(3);
    head->next->prev = head;
    head->next->next = createNode(4);
    head->next->next->prev = head->next;

    // Print the original list
    printf("Original Linked List:");
    printList(head);

    // Insert a new node after node with key 1
    printf("Inserting Node with data 2 after node 1 :");
    int data = 2;
    int key = 1;
    head = insertAfter(head, key, data);

    // Print the updated list
    printList(head);

    return 0;
}
